var searchIndex = JSON.parse('{\
"chess_lib":{"doc":"","t":"NNNNENENDENNNNNDENNNNNEFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AwaitPromotion","Bishop","Black","Checkmate","Color","Draw","DrawState","FiftyMoveRule","Game","GameState","InProgress","InsufficientMaterial","King","Knight","Pawn","Piece","PieceType","Queen","Rook","Stalemate","White","Win","WinState","alg_notation_to_indx","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_fen","get_active_player","get_all_legal_moves","get_captures","get_legal_moves_array_index","get_state","hash","in_check","indx_to_alg_notation","into","into","into","into","into","into","into","make_move","make_move_array_index","new","new_starting_pos","opposite","piece_at_alg_notation","piece_at_array_index","promote_to_piece","to_fen","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_last_move"],"q":[[0,"chess_lib"]],"d":["","","","","Enum for piece color","","Draw states used in <code>GameState::Draw</code>","","Main Game struct for chess board representation.  Used to …","Enum for representing the state of a chess game.","","","","","","Struct for representing a chess piece.","Enum for all types of standard chess pieces","","","","","","Win state used in <code>GameState::Win</code>. <code>Color</code> represents the …","Get array indicies for a give <code>notation</code> written in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses a Forsyth-Edwards Notation (FEN) string and …","Returns color of active player","Get all legal moves for a player (color) in a given …","Returns <code>vec</code> of each <code>Piece</code> that <code>color</code> has captured during …","Get a <code>Vec</code> of legal moves for a given square. The vector …","Returns current state of the game. For possible game …","","Returns bool representing wether a player is in check or …","Get algebraic notation for a given <code>indx</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make a move on the board using algebraic notation.","Make a move on the board using array indicies.","","Create a new board with the standard starting position.","Returns the opposite color of the piece","Get piece at given position using algebraic notation.","Get piece at given indexed position.","Used to promote a pawn at the final rank. This method is …","Generates a Forsyth-Edwards Notation (FEN) string from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Undo the last move that was made. Reverts pieces as well …"],"i":[5,9,10,7,0,5,0,6,0,0,5,6,9,9,9,0,0,9,9,6,10,5,0,0,4,5,6,7,8,9,10,4,5,6,7,8,9,10,4,5,6,7,8,9,10,4,5,6,7,8,9,10,4,5,6,7,8,9,10,10,4,5,6,7,8,9,10,4,5,6,7,8,9,10,4,4,4,4,4,4,10,4,0,4,5,6,7,8,9,10,4,4,8,4,10,4,4,4,4,4,5,6,7,8,9,10,4,5,6,7,8,9,10,4,5,6,7,8,9,10,4,5,6,7,8,9,10,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],[[],11],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[[8,12],13],[[9,12],13],[[10,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[4,2]]]],[4,10],[[4,10],[[15,[14]]]],[[4,10],[[14,[8]]]],[4,[[3,[14,2]]]],[4,5],[[10,16]],[[4,10],11],[[],[[3,[2,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,1,1,11],[[3,[11,2]]]],[[4,11],[[3,[11,2]]]],[[9,10],8],[[],4],[10,10],[[4,1],[[3,[[17,[8]],2]]]],[4,[[3,[[17,[8]],2]]]],[[4,9],11],[4,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[4]],"c":[],"p":[[15,"str"],[3,"String"],[4,"Result"],[3,"Game"],[4,"GameState"],[4,"DrawState"],[4,"WinState"],[3,"Piece"],[4,"PieceType"],[4,"Color"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"HashMap"],[8,"Hasher"],[4,"Option"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
